apply plugin: 'com.android.application'

ext {
    _supportLibrary = '27.1.1'
    _compileSdkVersion = 27
    _targetSdkVersion = 27
    _minSdkVersion = 16
    _versionCode = 1
    _versionName = "1.0.11"
}

android {
    compileSdkVersion _compileSdkVersion
    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        applicationId "com.kopirealm.peasyrecyclerview.sample"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName _versionName
        setProperty("archivesBaseName", ANDROID_ARTIFACT_ID)
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        distribution {
            keyAlias 'AndroidDebugKey'
            storeFile file("debug.keystore")
            storePassword 'android'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.distribution
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.distribution
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    afterEvaluate {
        def fileExtension = ".apk";
        applicationVariants.all { variant ->
            variant.outputs.all {
                def distributionMode = "${variant.buildType.name}"
                if ("${variant.flavorName}"?.trim()) {
                    distributionMode = "${variant.flavorName}-" + distributionMode
                }
                def finalOutputFileName = "${archivesBaseName}-${_versionName}-${distributionMode}${fileExtension}"
                outputFileName = "${finalOutputFileName}"
            }
            variant.assemble.doLast { assemble ->
                def timestamp = "${new Date().format('yyyyMMdd-HHmm')}";
                def distributionPath = "../${fileExtension}";
                // copy the apk in another directory, add here your
                // logic to customize the destination folder
                copy {
                    from variant.outputs*.outputFile
                    into "${distributionPath}/${timestamp}/${variant.flavorName}"
                }
                // if you don't want to delete the file after copying it comment the line below
                delete variant.outputs*.outputFile
            }
        }
    }
    flavorDimensions "pluginStatus"
    productFlavors {
        wip {
            dimension "pluginStatus"
        }
        official {
            dimension "pluginStatus"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:4.12"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    implementation "com.android.support:design:$_supportLibrary"
    implementation "com.android.support:support-vector-drawable:$_supportLibrary"
    implementation "com.android.support:support-annotations:$_supportLibrary"
    implementation "com.android.support:appcompat-v7:$_supportLibrary"
    implementation "com.android.support:design:$_supportLibrary"
    implementation "com.android.support:recyclerview-v7:$_supportLibrary"
    officialImplementation "com.github.kopihao:peasy-recyclerview:$_versionName"
    wipImplementation project(path: ':peasy-recyclerview')
}
