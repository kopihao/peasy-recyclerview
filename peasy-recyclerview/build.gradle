apply plugin: 'com.android.library'

// Publish to No Where via Nothing
def noDistScript = ""
// Publish to Maven Central via OSSRH Maven repository
def mavenDistScript = "publish-maven.gradle"
// Publish to Maven Central + JCenter via Bintray
def bintrayDistScript = "publish-bintray.gradle"
def useDistScript = noDistScript;

ext {
    _supportLibrary = '28.0.0'
    _compileSdkVersion = 28
    _targetSdkVersion = 28
    _minSdkVersion = 16
    _versionCode = 1
    _versionName = "1.0.8"
}

android {
    compileSdkVersion _compileSdkVersion
    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName _versionName
        setProperty("archivesBaseName", ANDROID_ARTIFACT_ID)
    }
    buildTypes {
        debug {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    afterEvaluate {
        libraryVariants.all { variant ->
            variant.outputs.all { output ->
                if (outputFile != null && outputFileName.endsWith('.aar')) {
                    def distributionMode = "${variant.buildType.name}"
                    if ("${variant.flavorName}"?.trim()) {
                        distributionMode = "${variant.flavorName}-" + distributionMode
                    }
                    def finalOutputFileName = "${archivesBaseName}-${_versionName}-${distributionMode}.aar"
                    outputFileName = "${finalOutputFileName}"
                }
            }
        }
        task publishedToMaven {
            doLast {
                println "\t"
                println "******************KOPIHAO******************"
                println "******************publishedToMaven******************"
                println "******************KOPIHAO******************"
                println "\t"
            }
        }
        task publishedToBintray {
            doLast {
                println "\t"
                println "******************KOPIHAO******************"
                println "******************publishedToBintray******************"
                println "******************KOPIHAO******************"
                println "\t"
            }
        }
        task postAssembleRelease {
            doLast {
                println "\t"
                println "******************KOPIHAO******************"
                println "${archivesBaseName} AAR is ready to be distributed!"
                println "******************KOPIHAO******************"
                println "\t"
            }
        }
        assembleRelease.finalizedBy(postAssembleRelease)
        if ("${useDistScript}"?.trim() == mavenDistScript) {
            postAssembleRelease.finalizedBy(install)
            install.finalizedBy(uploadArchives)
            uploadArchives.finalizedBy(publishedToMaven)
        } else if ("${useDistScript}"?.trim() == bintrayDistScript) {
            postAssembleRelease.finalizedBy(install)
            install.finalizedBy(bintrayUpload)
            bintrayUpload.finalizedBy(publishedToBintray)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:4.12"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    implementation "com.android.support:support-annotations:$_supportLibrary"
    implementation "com.android.support:appcompat-v7:$_supportLibrary"
    implementation "com.android.support:design:$_supportLibrary"
    implementation "com.android.support:recyclerview-v7:$_supportLibrary"
}

if ("${useDistScript}" != "${noDistScript}") {
    // Beware, line below shouldn't execute within afterEvaluate{}
    // This will cause improper setup
    apply from: "${useDistScript}"
}


