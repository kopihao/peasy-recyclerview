apply plugin: 'com.android.library'
def printHeader = "||KOPIHAO>>>>\t|";
def printFooter = "|\t<<<<KOPIHAO||";

// Publish to No Where via Nothing
def noDistScript = ""
// Publish to Maven Central via OSSRH Maven repository
def mavenDistScript = "publish-maven.gradle"
// Publish to Maven Central + JCenter via Bintray
def bintrayDistScript = "publish-bintray.gradle"
def useDistScript = noDistScript;
// Generate JAVADOC, requireJAVADOC::boolean works with "AssembleRelease" process only
def requireJAVADOC = false;

ext {
    _supportLibrary = '28.0.0'
    _compileSdkVersion = 28
    _targetSdkVersion = 28
    _minSdkVersion = 16
    _versionCode = 1
    _versionName = "1.0.10"
}

android {
    compileSdkVersion _compileSdkVersion
    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName _versionName
        setProperty("archivesBaseName", ANDROID_ARTIFACT_ID)
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    afterEvaluate {
        def fileExtension = ".aar";
        def timestamp = "${new Date().format('yyyyMMdd-HHmm')}";
        def distributionPath = "../${fileExtension}";
        libraryVariants.all { variant ->
            variant.outputs.all { output ->
                if (outputFile != null && outputFileName.endsWith("${fileExtension}")) {
                    def distributionMode = "${variant.buildType.name}"
                    if ("${variant.flavorName}"?.trim()) {
                        distributionMode = "${variant.flavorName}-" + distributionMode
                    }
                    def finalOutputFileName = "${archivesBaseName}-${_versionName}-${distributionMode}${fileExtension}"
                    outputFileName = "${finalOutputFileName}"
                }
            }
            variant.assemble.doLast { assemble ->
                // copy the apk in another directory, add here your
                // logic to customize the destination folder
                copy {
                    from variant.outputs*.outputFile
                    into "${distributionPath}/${timestamp}/${variant.flavorName}"
                }
                // if you don't want to delete the file after copying it comment the line below
                if ("${useDistScript}" == "${noDistScript}") {
                    delete variant.outputs*.outputFile
                }
            }
        }
        task postAssembleRelease {
            doLast {
                println "\t"
                println "\t"
                println "${printHeader}***${archivesBaseName} AAR is ready to be distributed!***${printFooter}"
                if (requireJAVADOC) {
                    println "${printHeader}***${archivesBaseName} JAVADOC published >> ${tasks.javadoc.destinationDir}!***${printFooter}"
                }
                println "\t"
                println "\t"
            }
        }
        if (requireJAVADOC) {
            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                destinationDir = file("${distributionPath}/${timestamp}/${archivesBaseName}-${_versionName}-JAVADOC/")
                failOnError false
            }
            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from tasks.javadoc.destinationDir
            }
            assembleRelease.finalizedBy(javadoc)
            javadoc.finalizedBy(postAssembleRelease)
        } else {
            assembleRelease.finalizedBy(postAssembleRelease)
        }
        if ("${useDistScript}"?.trim() == mavenDistScript) {
            task publishedToMaven {
                doLast {
                    println "${printHeader}***publishedToMaven***${printFooter}"
                }
            }
            postAssembleRelease.finalizedBy(install)
            install.finalizedBy(uploadArchives)
            uploadArchives.finalizedBy(publishedToMaven)
        } else if ("${useDistScript}"?.trim() == bintrayDistScript) {
            task publishedToBintray {
                doLast {
                    println "${printHeader}***publishedToBintray***${printFooter}"
                }
            }
            postAssembleRelease.finalizedBy(install)
            install.finalizedBy(bintrayUpload)
            bintrayUpload.finalizedBy(publishedToBintray)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:4.12"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    implementation "com.android.support:support-annotations:$_supportLibrary"
    implementation "com.android.support:appcompat-v7:$_supportLibrary"
    implementation "com.android.support:design:$_supportLibrary"
    implementation "com.android.support:recyclerview-v7:$_supportLibrary"
}

if ("${useDistScript}" != "${noDistScript}") {
    // Beware, line below shouldn't execute within afterEvaluate{}
    // This will cause improper setup
    apply from: "${useDistScript}"
}

